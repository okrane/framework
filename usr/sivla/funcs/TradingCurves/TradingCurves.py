# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.39
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
import traceback
import sys
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_TradingCurves', [dirname(__file__)])
        except ImportError:
            import _TradingCurves
            return _TradingCurves
        if fp is not None:
            try:
                _mod = imp.load_module('_TradingCurves', fp, pathname, description)
            except:
                traceback.print_exc(file=sys.stderr)
            finally:
                fp.close()
                return _mod
    _TradingCurves = swig_import_helper()
    del swig_import_helper
else:
    import _TradingCurves
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0



def get_elem(*args):
  return _TradingCurves.get_elem(*args)
get_elem = _TradingCurves.get_elem
class VwapTrendTrCurves(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VwapTrendTrCurves, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VwapTrendTrCurves, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _TradingCurves.new_VwapTrendTrCurves(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TradingCurves.delete_VwapTrendTrCurves
    __del__ = lambda self : None;
    __swig_getmethods__["computeTradingCurves"] = lambda x: _TradingCurves.VwapTrendTrCurves_computeTradingCurves
    if _newclass:computeTradingCurves = staticmethod(_TradingCurves.VwapTrendTrCurves_computeTradingCurves)
VwapTrendTrCurves_swigregister = _TradingCurves.VwapTrendTrCurves_swigregister
VwapTrendTrCurves_swigregister(VwapTrendTrCurves)

def VwapTrendTrCurves_computeTradingCurves(*args):
  return _TradingCurves.VwapTrendTrCurves_computeTradingCurves(*args)
VwapTrendTrCurves_computeTradingCurves = _TradingCurves.VwapTrendTrCurves_computeTradingCurves

class ISPortofolioTrCurves(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ISPortofolioTrCurves, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ISPortofolioTrCurves, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _TradingCurves.new_ISPortofolioTrCurves(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TradingCurves.delete_ISPortofolioTrCurves
    __del__ = lambda self : None;
    __swig_getmethods__["computeTradingCurves"] = lambda x: _TradingCurves.ISPortofolioTrCurves_computeTradingCurves
    if _newclass:computeTradingCurves = staticmethod(_TradingCurves.ISPortofolioTrCurves_computeTradingCurves)
ISPortofolioTrCurves_swigregister = _TradingCurves.ISPortofolioTrCurves_swigregister
ISPortofolioTrCurves_swigregister(ISPortofolioTrCurves)

def ISPortofolioTrCurves_computeTradingCurves(*args):
  return _TradingCurves.ISPortofolioTrCurves_computeTradingCurves(*args)
ISPortofolioTrCurves_computeTradingCurves = _TradingCurves.ISPortofolioTrCurves_computeTradingCurves

class VwapPortofolioTrCurves(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, VwapPortofolioTrCurves, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, VwapPortofolioTrCurves, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _TradingCurves.new_VwapPortofolioTrCurves(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TradingCurves.delete_VwapPortofolioTrCurves
    __del__ = lambda self : None;
    __swig_getmethods__["computeTradingCurves"] = lambda x: _TradingCurves.VwapPortofolioTrCurves_computeTradingCurves
    if _newclass:computeTradingCurves = staticmethod(_TradingCurves.VwapPortofolioTrCurves_computeTradingCurves)
VwapPortofolioTrCurves_swigregister = _TradingCurves.VwapPortofolioTrCurves_swigregister
VwapPortofolioTrCurves_swigregister(VwapPortofolioTrCurves)

def VwapPortofolioTrCurves_computeTradingCurves(*args):
  return _TradingCurves.VwapPortofolioTrCurves_computeTradingCurves(*args)
VwapPortofolioTrCurves_computeTradingCurves = _TradingCurves.VwapPortofolioTrCurves_computeTradingCurves

class doublep(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doublep, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doublep, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _TradingCurves.new_doublep()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TradingCurves.delete_doublep
    __del__ = lambda self : None;
    def assign(self, *args): return _TradingCurves.doublep_assign(self, *args)
    def value(self): return _TradingCurves.doublep_value(self)
    def cast(self): return _TradingCurves.doublep_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _TradingCurves.doublep_frompointer
    if _newclass:frompointer = staticmethod(_TradingCurves.doublep_frompointer)
doublep_swigregister = _TradingCurves.doublep_swigregister
doublep_swigregister(doublep)

def doublep_frompointer(*args):
  return _TradingCurves.doublep_frompointer(*args)
doublep_frompointer = _TradingCurves.doublep_frompointer

class intp(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intp, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intp, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _TradingCurves.new_intp()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TradingCurves.delete_intp
    __del__ = lambda self : None;
    def assign(self, *args): return _TradingCurves.intp_assign(self, *args)
    def value(self): return _TradingCurves.intp_value(self)
    def cast(self): return _TradingCurves.intp_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _TradingCurves.intp_frompointer
    if _newclass:frompointer = staticmethod(_TradingCurves.intp_frompointer)
intp_swigregister = _TradingCurves.intp_swigregister
intp_swigregister(intp)

def intp_frompointer(*args):
  return _TradingCurves.intp_frompointer(*args)
intp_frompointer = _TradingCurves.intp_frompointer

class intArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, intArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, intArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _TradingCurves.new_intArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TradingCurves.delete_intArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _TradingCurves.intArray___getitem__(self, *args)
    def __setitem__(self, *args): return _TradingCurves.intArray___setitem__(self, *args)
    def cast(self): return _TradingCurves.intArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _TradingCurves.intArray_frompointer
    if _newclass:frompointer = staticmethod(_TradingCurves.intArray_frompointer)
intArray_swigregister = _TradingCurves.intArray_swigregister
intArray_swigregister(intArray)

def intArray_frompointer(*args):
  return _TradingCurves.intArray_frompointer(*args)
intArray_frompointer = _TradingCurves.intArray_frompointer

class doubleArray(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, doubleArray, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, doubleArray, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _TradingCurves.new_doubleArray(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _TradingCurves.delete_doubleArray
    __del__ = lambda self : None;
    def __getitem__(self, *args): return _TradingCurves.doubleArray___getitem__(self, *args)
    def __setitem__(self, *args): return _TradingCurves.doubleArray___setitem__(self, *args)
    def cast(self): return _TradingCurves.doubleArray_cast(self)
    __swig_getmethods__["frompointer"] = lambda x: _TradingCurves.doubleArray_frompointer
    if _newclass:frompointer = staticmethod(_TradingCurves.doubleArray_frompointer)
doubleArray_swigregister = _TradingCurves.doubleArray_swigregister
doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(*args):
  return _TradingCurves.doubleArray_frompointer(*args)
doubleArray_frompointer = _TradingCurves.doubleArray_frompointer



